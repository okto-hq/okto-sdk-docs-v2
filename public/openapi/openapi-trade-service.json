{
    "openapi": "3.1.0",
    "info": {
      "title": "Okto Trade Service",
      "description": "Okto Trade Service describes the APIs for the trade service. It provides endpoints for fetching quotes, best routes, registering intents, and retrieving order details.",
      "version": "1.0.0",
      "contact": {
        "name": "Ovia Seshadri",
        "url": "https://okto.tech",
        "email": "devrel@coindcx.com"
      }
    },
    "servers": [
      {
        "url": "https://okto-trade-service.oktostage.com/",
        "description": "Trade Service URL"
      }
    ],
    "tags": [
      {
        "name": "Usage",
        "description": "All the usage related APIs"
      }
    ],
    "security": [
      {
        "xAuthorizationSecret": []
      }
    ],
    "paths": {
      "/vpc/v1/get-quote": {
        "post": {
          "tags": ["Usage"],
          "summary": "Get Quote",
          "x-description-md": "Fetch a real-time quote for swapping a specified token amount from one chain to another. Check out the [`getQuote`](https://github.com/okto-hq/okto-sdkv2-trade-service-template-app/tree/main/src/api) API template script for implementation details.",
          "operationId": "getQuote",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["fromToken", "fromChain", "toToken", "toChain", "fromAmount"],
                  "properties": {
                    "fromToken": {
                      "type": "string",
                      "example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                    },
                    "fromChain": {
                      "type": "string",
                      "example": "eip155:8453"
                    },
                    "toToken": {
                      "type": "string",
                      "example": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
                    },
                    "toChain": {
                      "type": "string",
                      "example": "eip155:42161"
                    },
                    "sameChainFee": {
                      "type": "string",
                      "example": "10"
                    },
                    "sameChainFeeCollector": {
                      "type": "string",
                      "example": "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2"
                    },
                    "crossChainFee": {
                      "type": "string",
                      "example": "10"
                    },
                    "crossChainFeeCollector": {
                      "type": "string",
                      "example": "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2"
                    },
                    "fromAmount": {
                      "type": "string",
                      "example": "1000"
                    },
                    "slippage": {
                      "type": "string",
                      "example": "3.0"
                    },
                    "fromUserWalletAddress": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "toUserWalletAddress": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Fetched",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "required": ["outputAmount", "routeMetadata"],
                    "properties": {
                      "outputAmount": {
                        "type": "string",
                        "example": "979"
                      },
                      "routeMetadata": {
                        "type": "object",
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "example": "Okto_ULL"
                          },
                          "aggregatorName": {
                            "type": "string",
                            "example": "Okto_ULL"
                          },
                          "type": {
                            "type": "string",
                            "example": "Bridge"
                          }
                        }
                      },
                      "permitData": {
                        "type": "object",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                      },
                      "errorCode": {
                        "type": "string",
                        "example": "INVALID_INPUT"
                      },
                      "message": {
                        "type": "string",
                        "example": "The provided token address is invalid."
                      },
                      "trace_id": {
                        "type": "string",
                        "example": "f83c2a5b-8352-4e2d-a33c-9b7d85f19261"
                      },
                      "details": {
                        "type": "object",
                        "nullable": true,
                        "description": "Additional error context"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/vpc/v1/get-best-route": {
        "post": {
          "tags": ["Usage"],
          "summary": "Get Best Route",
          "x-description-md": "Find the most optimal route for swapping tokens across chains. This API determines the best path based on source/destination tokens, chains, amount, and user wallet addresses. Check out the [`getBestRoute`](https://github.com/okto-hq/okto-sdkv2-trade-service-template-app/tree/main/src/api) API template script for implementation details.",
          "operationId": "getBestRoute",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["fromToken", "fromChain", "toToken", "toChain", "fromAmount", "fromUserWalletAddress", "toUserWalletAddress"],
                  "properties": {
                    "routeId": {
                      "type": "string",
                      "example": "80c5a9e7-92a8-49f8-ac55-21f883bf8bc3"
                    },
                    "fromToken": {
                      "type": "string",
                      "example": "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2"
                    },
                    "fromChain": {
                      "type": "string",
                      "example": "eip155:8453"
                    },
                    "toToken": {
                      "type": "string",
                      "example": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
                    },
                    "toChain": {
                      "type": "string",
                      "example": "eip155:42161"
                    },
                    "sameChainFee": {
                      "type": "string",
                      "example": "10"
                    },
                    "sameChainFeeCollector": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "crossChainFee": {
                      "type": "string",
                      "example": "10"
                    },
                    "crossChainFeeCollector": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "fromAmount": {
                      "type": "string",
                      "example": "1000"
                    },
                    "slippage": {
                      "type": "string",
                      "example": "3.0"
                    },
                    "permitDeadline": {
                      "type": "string",
                      "example": ""
                    },
                    "fromUserWalletAddress": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "toUserWalletAddress": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Fetched",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "routeId": {
                        "type": "string",
                        "example": "ea95acb6-3b29-49bc-8af5-b9332d5225b4"
                      },
                      "priceImpact": {
                        "type": "string",
                        "example": "0"
                      },
                      "isPriceImpactCalculated": {
                        "type": "boolean",
                        "example": true
                      },
                      "tokenPrices": {
                        "type": "object",
                        "properties": {
                          "fromTokenPriceInUSD": {
                            "type": "string",
                            "example": "100"
                          },
                          "toTokenPriceInUSD": {
                            "type": "string",
                            "example": "100"
                          }
                        }
                      },
                      "feeCharged": {
                        "type": "boolean",
                        "example": false
                      },
                      "outputAmount": {
                        "type": "string",
                        "example": "1056"
                      },
                      "steps": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "transaction"
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "serviceType": {
                                  "type": "string",
                                  "example": "bridge"
                                },
                                "transactionType": {
                                  "type": "string",
                                  "example": "approval"
                                },
                                "protocol": {
                                  "type": "string",
                                  "example": "Okto_ULL"
                                },
                                "aggregatorName": {
                                  "type": "string",
                                  "example": "Okto_ULL"
                                }
                              }
                            },
                            "chainId": {
                              "type": "string",
                              "example": "9400de12-efc6-3e69-ab02-0eaf5aaf21e5"
                            },
                            "txnData": {
                              "type": "object",
                              "properties": {
                                "to": {
                                  "type": "string",
                                  "example": "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2"
                                },
                                "from": {
                                  "type": "string",
                                  "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                                },
                                "gasPrice": {
                                  "type": "string",
                                  "example": "3725024"
                                },
                                "gasLimit": {
                                  "type": "string",
                                  "example": "21000"
                                },
                                "value": {
                                  "type": "string",
                                  "example": "0x0"
                                },
                                "data" : {
                                  "type": "string",
                                  "example": "0x095ea7b3000000000000000000000000d33a607f1c54e76770c21e40a560e411706ca448ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                },
                                "chainId": {
                                  "type": "string",
                                  "example": "8453"
                                },
                                "transactionCost": {
                                  "type": "string",
                                  "example": "535761940224"
                                },
                                "l1GasCost": {
                                  "type": "string",
                                  "example": "342768446784"
                                }
                              }
                            },
                            "intentCalldata": {
                              "type": "object",
                              "nullable": true
                            }
                          }
                        }
                      },
                      "permitDataToSign": {
                        "type": "string",
                        "example": "{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"PermitBatchTransferFrom\":[{\"name\":\"permitted\",\"type\":\"TokenPermissions[]\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"TokenPermissions\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},\"primaryType\":\"PermitBatchTransferFrom\",\"domain\":{\"name\":\"Permit2\",\"chainId\":8453,\"verifyingContract\":\"0x000000000022D473030F116dDEE9F6B43aC78BA3\"},\"message\":{\"deadline\":\"1740749617\",\"nonce\":\"3250162946\",\"permitted\":[{\"amount\":\"1000\",\"token\":\"0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2\"}],\"spender\":\"0xd33a607f1c54e76770C21E40A560E411706ca448\"}}"
                      },
                      "routeExpiry": {
                        "type": "string",
                        "example": "1m0s",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                      },
                      "errorCode": {
                        "type": "string",
                        "example": "INVALID_INPUT"
                      },
                      "message": {
                        "type": "string",
                        "example": "The provided token address is invalid."
                      },
                      "trace_id": {
                        "type": "string",
                        "example": "f83c2a5b-8352-4e2d-a33c-9b7d85f19261"
                      },
                      "details": {
                        "type": "object",
                        "nullable": true,
                        "description": "Additional error context"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/vpc/v1/register": {
        "post": {
          "tags": ["Usage"],
          "summary": "Register Intent",
          "x-description-md": "Registers a swap intent on the system using a signed order. This API call is typically made after generating a quote and selecting a route, and before executing the actual swap. It ensures the swap details are securely logged and authorized for processing. Check out the [`registerIntent`](https://github.com/okto-hq/okto-sdkv2-trade-service-template-app/tree/main/src/api) API template script for implementation details.",
          "operationId": "registerIntent",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [],
                  "properties": {
                    "orderBytes": {
                      "type": "string",
                      "example": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000080ee0f7519b805c41153cc51d79b0c755f76006000000000000000000000000e832ad9c930060a55de249b0561be40b5fa5687000000000000000000000000000000000000000000000000000000000ebe34bac1fca116f439fa7af0604ced8c7a6239cdcabb5070838cbc80cdba0089733e4720000000000000000000000000000000000000000000000000000000067ebe5a30000000000000000000000000000000000000000000000000000000067ebe61b3501896997d41492e9906c386f2a43083ede3230d2641e949cdaceed9def1b4600000000000000000000000000000000000000000000000000000000000001..."
                    },
                    "orderBytesSignature": {
                      "type": "string",
                      "example": "0x5d3bcb60f2010c12f9bbc1669b145189e37b9ec5b5a424f8dc07e4c34ace159e3f9b66b3a520c2f9ad570089134e030c7c87299972a55d801c399d8bea8f1fbd1c"
                    },
                    "caipId": {
                      "type": "string",
                      "example": "eip155:42161"
                    }                    
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Intent registered successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties":{
                          "order_id": {
                            "type": "string",
                            "orderId": "...orderId..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                      },
                      "errorCode": {
                        "type": "string",
                        "example": "INVALID_INPUT"
                      },
                      "message": {
                        "type": "string",
                        "example": "Failed to register intent."
                      },
                      "trace_id": {
                        "type": "string",
                        "example": "f83c2a5b-8352-4e2d-a33c-9b7d85f19261"
                      },
                      "details": {
                        "type": "object",
                        "nullable": true,
                        "description": "Additional error context"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/vpc/v1/order-details": {
        "post": {
          "tags": ["Usage"],
          "summary": "Get Order Details",
          "x-description-md": "Fetch detailed information about a previously registered swap intent using the order ID. This API returns the status, route, fee, swapper inputs/outputs, and execution steps associated with the order. It is typically used to track the progress or outcome of a swap intent. Check out the [`orderDetails`](https://github.com/okto-hq/okto-sdkv2-trade-service-template-app/tree/main/src/api) API template script for implementation details.\n\n**Understanding Order Status**\n\nThe `orderData.status` field in the response indicates your order’s current state:\n\n| Status Code | Description |\n|-------------|-------------|\n| `-1` | Order expired. The order did not register on-chain. Terminal state. |\n| `0` | Order received by the backend but not yet registered on-chain. |\n| `1` | Order registered on-chain but not yet filled. |\n| `2` | Order settled successfully. Terminal state. |\n| `3` | Order in dispute. The order was filled but not yet settled. |\n| `4` | Order refunded. The order was not filled, and user was refunded. Terminal state. |",
          "operationId": "orderDetails",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [],
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "example": "0x9262a7731f07f74e7746f682220a3a8e2d51ca8fcc33f0cd08c469d79a2814e8"
                    },
                    "caipId": {
                      "type": "string",
                      "example": "eip155:42161"
                    }                    
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Fetched",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "1"
                      },
                      "filler": {
                        "type": "string",
                        "example": "0x31Fd17cf0E242C38456E34c1245fDdD426b6fcdf"
                      },
                      "fillDeadline": {
                        "type": "string",
                        "example": "1751961723"
                      },
                      "orderDataType": {
                        "type": "string",
                        "example": "0"
                      },
                      "user": {
                        "type": "string",
                        "example": "0x8aaf1F5A168EE78D1b96df345eCaf0098607B8F6"
                      },
                      "destinationTx": {
                        "type": "string",
                        "example": ""
                      },
                      "orderData": {
                        "type": "object",
                        "properties": {
                          "integrator": {
                            "type": "string",
                            "example": "0x0000000000000000000000000000000000000000"
                          },
                          "integratorFeeBps": {
                            "type": "string",
                            "example": "0"
                          },
                          "minReceived": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "token": {
                                  "type": "string",
                                  "example": "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"
                                },
                                "amount": {
                                  "type": "string",
                                  "example": "500000"
                                },
                                "recipient": {
                                  "type": "string",
                                  "example": "0x31Fd17cf0E242C38456E34c1245fDdD426b6fcdf"
                                },
                                "chainId": {
                                  "type": "string",
                                  "example": "43376495806317063146517865045423980218291426573811029661813620785995169497246"
                                }
                              }
                            }
                          },
                          "fillInstructions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "destinationChainId": {
                                  "type": "string",
                                  "example": "30623935521215732608318225916586969493646139388472508660171461673454691529708"
                                },
                                "destinationSettler": {
                                  "type": "string",
                                  "example": "0x080eE0f7519b805c41153CC51d79b0C755f76006"
                                },
                                "originData": {
                                  "type": "object",
                                  "properties": {
                                    "originChainId": {
                                      "type": "string",
                                      "example": ""
                                    },
                                    "fillOutputs": {
                                      "type": "object",
                                      "nullable": true
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "permitDataToSign": {
                        "type": "string",
                        "nullable": true,
                        "example": ""
                      },
                      "routeExpiry": {
                        "type": "string",
                        "nullable": true,
                        "example": "1m0s"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                      },
                      "errorCode": {
                        "type": "string",
                        "example": "INVALID_INPUT"
                      },
                      "message": {
                        "type": "string",
                        "example": "Failed to register intent."
                      },
                      "trace_id": {
                        "type": "string",
                        "example": "f83c2a5b-8352-4e2d-a33c-9b7d85f19261"
                      },
                      "details": {
                        "type": "object",
                        "nullable": true,
                        "description": "Additional error context"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/vpc/v1/get-call-data": {
        "post": {
          "tags": ["Usage"],
          "summary": "Get Call Data",
          "x-description-md": "Generate the complete calldata required to execute a token swap transaction on-chain. This API prepares the encoded calldata based on the selected route, amount, tokens, slippage, and fee configurations. It supports both same-chain and cross-chain swaps and includes optional permit data for approvals. Check out the [`getCallData`](https://github.com/okto-hq/okto-sdkv2-trade-service-template-app/tree/main/src/api) API template script for implementation details.",
          "operationId": "getCallData",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["routeId", "fromToken", "fromChain", "toToken", "toChain", "fromAmount", "toTokenAmountMinimum","fromUserWalletAddress", "toUserWalletAddress"],
                  "properties": {
                    "routeId": {
                      "type": "string",
                      "example": "80c5a9e7-92a8-49f8-ac55-21f883bf8bc3"
                    },
                    "fromToken": {
                      "type": "string",
                      "example": "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2"
                    },
                    "fromChain": {
                      "type": "string",
                      "example": "eip155:8453"
                    },
                    "toToken": {
                      "type": "string",
                      "example": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
                    },
                    "toChain": {
                      "type": "string",
                      "example": "eip155:42161"
                    },
                    "sameChainFee": {
                      "type": "string",
                      "example": "10"
                    },
                    "sameChainFeeCollector": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "crossChainFee": {
                      "type": "string",
                      "example": "10"
                    },
                    "crossChainFeeCollector": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "fromAmount": {
                      "type": "string",
                      "example": "1"
                    },
                    "toTokenAmountMinimum": {
                      "type": "string",
                      "example": "1000"
                    },
                    "slippage": {
                      "type": "string",
                      "example": "5"
                    },
                    "fromUserWalletAddress": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "toUserWalletAddress": {
                      "type": "string",
                      "example": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9"
                    },
                    "permitData": {
                      "type": "string",
                      "example": "{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"PermitBatchTransferFrom\":[{\"name\":\"permitted\",\"type\":\"TokenPermissions[]\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"TokenPermissions\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},\"primaryType\":\"PermitBatchTransferFrom\",\"domain\":{\"name\":\"Permit2\",\"chainId\":8453,\"verifyingContract\":\"0x000000000022D473030F116dDEE9F6B43aC78BA3\"},\"message\":{\"deadline\":\"1740749617\",\"nonce\":\"3250162946\",\"permitted\":[{\"amount\":\"1000\",\"token\":\"0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2\"}],\"spender\":\"0xd33a607f1c54e76770C21E40A560E411706ca448\"}}"
                    },
                    "permitSignature": {
                      "type": "string",
                      "example": "0x"
                    }                 
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Fetched",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "routeId": {
                        "type": "string",
                        "example": "80c5a9e7-92a8-49f8-ac55-21f883bf8bc3"
                      },
                      "priceImpact": {
                        "type": "string",
                        "example": "0"
                      },
                      "isPriceImpactCalculated": {
                        "type": "boolean",
                        "example": true
                      },
                      "tokenPrices": {
                        "type": "object",
                        "example": {}
                      },
                      "feeCharged": {
                        "type": "boolean",
                        "example": true
                      },
                      "outputAmount": {
                        "type": "string",
                        "example": ""
                      },
                      "steps": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "transaction"
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "serviceType": {
                                  "type": "string",
                                  "example": "bridge"
                                },
                                "transactionType": {
                                  "type": "string",
                                  "example": "init"
                                },
                                "protocol": {
                                  "type": "string",
                                  "example": "Okto_ULL"
                                },
                                "aggregatorName": {
                                  "type": "string",
                                  "example": "Okto_ULL"
                                }
                              }
                            },
                            "chainId": {
                              "type": "string",
                              "example": "9400de12-efc6-3e69-ab02-0eaf5aaf21e5"
                            },
                            "txnData": {
                              "type": "object",
                              "nullable": true,
                              "example": {
                                "to": "0xd33a607f1c54e76770C21E40A560E411706ca448",
                                "from": "0x2c2505D0E21f32F38bCEBeca1C331ab4069bBCb9",
                                "gasPrice": "0",
                                "gasLimit": 0,
                                "value": "0x0",
                                "data": "0x1af715cb0000000000000000000000000000000000000000000000000000000000000040...",
                                "chainId": "8453",
                                "transactionCost": "0",
                                "l1GasCost": "0"
                              }
                            },
                            "intentCalldata": {
                              "type": "object",
                              "nullable": true
                            }
                          }
                        }
                      },
                      "orderTypedData": {
                        "type": "string",
                        "nullable": true
                      },
                      "routeExpiry": {
                        "type": "string",
                        "example": "",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                      },
                      "errorCode": {
                        "type": "string",
                        "example": "INVALID_INPUT"
                      },
                      "message": {
                        "type": "string",
                        "example": "The provided token address is invalid."
                      },
                      "trace_id": {
                        "type": "string",
                        "example": "f83c2a5b-8352-4e2d-a33c-9b7d85f19261"
                      },
                      "details": {
                        "type": "object",
                        "nullable": true,
                        "description": "Additional error context"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "xAuthorizationSecret": {
          "type": "apiKey",
          "in": "header",
          "name": "x-authorization-secret",
          "description": "Trade Service Secret (set this to the value of TRADE_SERVICE_SECRET from .env)"
        },
        "basicAuth": {
          "type": "http",
          "scheme": "basic"
        },
        "apiKeyHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-API-Key",
          "description": "Okto App Secret",
          "example": "OKTO_APP_SECRET"
        },
        "apiKeyQuery": {
          "type": "apiKey",
          "in": "query",
          "name": "api_key"
        },
        "apiKeyCookie": {
          "type": "apiKey",
          "in": "cookie",
          "name": "api_key"
        },
        "v1auth": {
          "type": "apiKey",
          "name": "X-Api-Key",
          "in": "header",
          "description": "Okto App Secret",
          "example": "YOUR_OKTO_APP_SECRET"
        },
        "oktoAppSecretAuth": {
          "type": "apiKey",
          "in": "header",
          "name": "Okto App Secret",
          "description": "Okto App Secret",
          "example": "YOUR_OKTO_APP_SECRET"
        },
        "oauth2": {
          "type": "oauth2",
          "flows": {
            "implicit": {
              "authorizationUrl": "https://galaxy.scalar.com/oauth/authorize",
              "scopes": {
                "write:planets": "modify planets in your account",
                "read:planets": "read your planets"
              }
            }
          }
        }
      },
      "parameters": {
        "intent_id": {
          "name": "intent_id",
          "in": "query",
          "description": "Intent id of the order.",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        "intent_type": {
          "name": "intent_type",
          "in": "query",
          "description": "Intent type of the order.",
          "required": false,
          "schema": {
            "type": "string",
            "example": "TOKEN_TRANSFER"
          }
        },
        "status": {
          "name": "status",
          "in": "query",
          "description": "Status of the order.",
          "required": false,
          "schema": {
            "type": "string",
            "example": "SUCCESSFUL"
          }
        },
        "planetId": {
          "name": "planetId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": [1]
          }
        },
        "id_token": {
          "name": "id_token",
          "in": "header",
          "description": "The id_token of the user received from the Google OAuth2 provider.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "TOKEN_ID"
          }
        },
        "user_id": {
          "name": "user_id",
          "in": "query",
          "description": "User id of the user.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "bb7bee27-a25b-4cff-8784-ae55a3a6ad60"
          }
        },
        "bulk_order_id": {
          "name": "bulk_order_id",
          "in": "query",
          "description": "Order id of the NFT.",
          "schema": {
            "type": "string",
            "example": "dd784ad9-68f8-49b9-87dc-13723e933eab"
          }
        },
        "network_name": {
          "name": "network_name",
          "in": "query",
          "description": "Network used for the transfer.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "APTOS TESTNET"
          }
        },
        "order_id": {
          "name": "order_id",
          "in": "query",
          "description": "The order ID to get the specific order details.",
          "schema": {
            "type": "string",
            "examples": "20b57c3f-7ea3-4531-8bb8-313c870ebc1a"
          }
        },
        "order_id_nft": {
          "name": "order_id",
          "in": "query",
          "description": "Order ID of the NFT.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "20b57c3f-7ea3-4531-8bb8-313c870ebc1a"
          }
        },
        "order_id_txn": {
          "name": "order_id",
          "in": "query",
          "description": "Order ID of the transaction to check.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "20b57c3f-7ea3-4531-8bb8-313c870ebc1a"
          }
        },
        "order_state": {
          "name": "order_state",
          "in": "query",
          "description": "The order state to filter the orders. Possible values are PENDING, SUCCESS, FAILED.",
          "schema": {
            "type": "string",
            "examples": "PENDING"
          }
        },
        "token_address": {
          "name": "token_address",
          "in": "query",
          "description": "Address of the token to be transferred.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "0x2f7b97837f2d14ba2ed3a4b2282e259126a9b848"
          }
        },
        "transaction_EVM": {
          "name": "transaction_EVM",
          "description": "Execute raw transactions (EVM). Use this transaction object if \"network_name\" is any \"BASE\", \"POLYGON\" or \"POLYGON_TESTNET_AMOY\".",
          "in": "query",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The address for the sending account.",
                    "example": "0x0342A54DD44E8744FD185579Af57845Cb0ac6cB0"
                  },
                  "to": {
                    "type": "string",
                    "description": " The destination address of the message, left undefined for a contract-creation transaction.",
                    "example": "0x80322ea18633A1f713e987d65Ae78AcCDAB6e55e"
                  },
                  "data": {
                    "type": "string",
                    "description": " Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code.",
                    "example": "0x..."
                  },
                  "value": {
                    "type": "string",
                    "description": "The value transferred for the transaction in wei, also the endowment if it's a contract-creation transaction.",
                    "example": "0x10000"
                  }
                }
              }
            }
          }
        },
        "transaction_SOL": {
          "name": "transaction_SOL",
          "description": "Execute raw transactions (Solana). Use this transaction object if \"network_name\" is \"SOLANA\" or \"SOLANA_DEVNET\".",
          "in": "query",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instructions": {
                    "description": "The instructions to atomically execute",
                    "type": "object",
                    "properties": {
                      "keys": {
                        "description": "Includes the AccountMeta for each account required by an instruction.",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/KeyData"
                        },
                        "example": [
                          {
                            "pubkey": "3dF1ef9F1Ab2AfD1Bf7dD578c729B6C711D597F2",
                            "isSigner": true,
                            "isWritable": false
                          }
                        ]
                      },
                      "programId": {
                        "description": "The address of the program which contains the execution logic for the instruction invoked.",
                        "type": "string",
                        "example": "AvxPZEWryvCtVm2zCXQZ4GbNFayNM79JeodvRYSWL4at"
                      },
                      "data": {
                        "description": "The instruction data for the instruction as a buffer of bytes",
                        "type": "array",
                        "example": "[108, 81, 78, 117, 125, 155, 56, 200, 192, 198, 45, 0, 0, 0, 0, 0]"
                      }
                    }
                  },
                  "signer": {
                    "type": "string",
                    "example": "[Hyq7Kcdhznoh3fwT9c15aXD91H7uv8XwWREcv2vkKRvj]"
                  }
                }
              }
            }
          }
        },
        "transaction_APT": {
          "name": "transaction_APT",
          "description": "Execute raw transactions (Aptos). Use this transaction object if \"network_name\" is \"APTOS\" or \"APTOS_TESTNET\".",
          "in": "query",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "function": {
                    "type": "function",
                    "example": "0x4::aptos_token::add_typed_property",
                    "description": "This is the identifier for the smart contract entry function on-chain that will trigger when you execute this transaction."
                  },
                  "typeArugements": {
                    "type": "array",
                    "example": ["0x4::token::Token", "0x1::string::String"],
                    "description": "Data type for each function arguement in the same order."
                  },
                  "fuctionArugements": {
                    "type": "array",
                    "example": [
                      "digitalAssetAddress",
                      "propertyKey",
                      "propertyValue"
                    ],
                    "description": "This is any data the function needs to run."
                  }
                }
              }
            }
          }
        },
        "quantity": {
          "name": "quantity",
          "in": "query",
          "description": "Quantity of tokens to be transferred.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "0.0001"
          }
        },
        "nft_address": {
          "name": "nft_address",
          "in": "query",
          "description": "Address of the nft which needs to be transferred.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "0x719dad0b2800205ab7bff539bd617b04e21fe311bc30fce6d6d2d3beecd8a14e"
          }
        },
        "operation_type": {
          "name": "operation_type",
          "in": "query",
          "description": "Type of operation to be performed.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "NFT_TRANSFER"
          }
        },
        "collection_address": {
          "name": "collection_address",
          "in": "query",
          "description": "Address of the collection which needs to be transferred.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "0x171e643e8e8dabc66b838b9055dbdf88647cf6601b164f5987f50a497bedfbe1"
          }
        },
        "collection_name": {
          "name": "collection_name",
          "in": "query",
          "description": "Name of the collection which needs to be transferred.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "super avengers"
          }
        },
        "recipient_address": {
          "name": "recipient_address",
          "in": "query",
          "description": "Address of the recipient address to send tokens to.",
          "required": true,
          "schema": {
            "type": "string",
            "examples": "0x8ff71ae16c88d86f5ec4100951f37a50683e8cd23ca515894854fcfc4ab7399b"
          }
        },
        "x_api_key": {
          "name": "x-api-key",
          "in": "header",
          "required": true,
          "description": "Your Okto App Secret",
          "schema": {
            "type": "string",
            "example": "YOUR_OKTO_APP_SECRET"
          }
        },
        "vendor_jwt": {
          "name": "Authorization",
          "in": "header",
          "required": true,
          "description": "Vendor's JWT that needs to be verified for the user authentication",
          "schema": {
            "type": "string"
          },
          "example": "Vendor jwt token"
        },
        "bearer_auth": {
          "name": "Authorization",
          "in": "header",
          "required": true,
          "description": "Your Bearer token",
          "schema": {
            "type": "string"
          },
          "example": "Bearer <YOUR_OKTO_TOKEN>",
          "default": "Bearer <YOUR_OKTO_TOKEN>"
        },
        "refresh_auth": {
          "name": "x-refresh-authorization",
          "in": "header",
          "required": true,
          "description": "Current refresh token with Bearer prefix",
          "schema": {
            "type": "string"
          },
          "example": "Bearer ${{refresh_auth_token}}"
        },
        "device_token_header": {
          "name": "x-device-token",
          "in": "header",
          "required": true,
          "description": "Current device token",
          "schema": {
            "type": "string"
          },
          "example": "${{device_token}}"
        },
        "page": {
          "name": "page",
          "in": "query",
          "description": "Page number",
          "default": 1,
          "required": false,
          "schema": {
            "type": "integer",
            "example": 1
          }
        },
        "size": {
          "name": "size",
          "in": "query",
          "description": "Number of items per page",
          "default": 10,
          "required": false,
          "schema": {
            "type": "integer",
            "example": 10
          }
        },
        "limit": {
          "name": "limit",
          "in": "query",
          "description": "The number of items to return",
          "required": false,
          "schema": {
            "type": "integer",
            "example": 10
          }
        },
        "offset": {
          "name": "offset",
          "in": "query",
          "description": "The number of items to skip",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        }
      },
      "responses": {
        "BadRequest": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "Forbidden": {
          "description": "Forbidden",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "NotFound": {
          "description": "NotFound",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      }
    }
  }
  